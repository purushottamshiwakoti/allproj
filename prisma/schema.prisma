// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ROLE {
  SUPERADMIN
  ADMIN
  SUBADMIN
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName   String
  email      String    @unique
  password   String
  role       ROLE
  projects   Project[] @relation(fields: [projectIds], references: [id])
  projectIds String[]  @db.ObjectId
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Project {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String           @unique
  folderIds       String[]         @db.ObjectId
  folders         Folder[]         @relation(fields: [folderIds], references: [id])
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  categories      Category[]
  users           User[]           @relation(fields: [userIds], references: [id])
  questions       Question[]
  userIds         String[]         @db.ObjectId
  typeofQuestions TypeOfQuestion[]
  Token           Token[]
}

model Folder {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  project    Project[]   @relation(fields: [projectIds], references: [id])
  projectIds String[]    @db.ObjectId
  subFolder  SubFolder[]
  userId     String?     @db.ObjectId
}

model SubFolder {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  folder     Folder?  @relation(fields: [folderId], references: [id])
  folderId   String?  @db.ObjectId
  Files      Files[]
}

model Files {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  subFolder   SubFolder? @relation(fields: [subFolderId], references: [id])
  subFolderId String?    @db.ObjectId
}

model Question {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  question      String?
  questionImage String?
  questionAudio String?
  questionVideo String?
  option        String?
  correctOption String
  optionImage   String?
  optionAudio   String?
  optionVideo   String?
  option1       String?
  option1Image  String?
  option1Audio  String?
  option1Video  String?
  option2       String?
  option2Image  String?
  option2Audio  String?
  option2Video  String?
  option3       String?
  option3Image  String?
  option3Audio  String?
  option3Video  String?

  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  Project          Project?        @relation(fields: [projectId], references: [id])
  projectId        String?         @db.ObjectId
  TypeOfQuestion   TypeOfQuestion? @relation(fields: [typeOfQuestionId], references: [id])
  category         Category?       @relation(fields: [categoryId], references: [id])
  subCategory      SubCategory?    @relation(fields: [subCategoryId], references: [id])
  typeOfQuestionId String?         @db.ObjectId
  categoryId       String?         @db.ObjectId
  subCategoryId    String?         @db.ObjectId
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  subCategories SubCategory[]
  Project       Project?      @relation(fields: [projectId], references: [id])
  projectId     String?       @db.ObjectId
  Question      Question[]
}

model SubCategory {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId String?    @db.ObjectId
  Question   Question[]
}

model TypeOfQuestion {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String
  questions  Question[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Project    Project?   @relation(fields: [projectId], references: [id])
  projectId  String?    @db.ObjectId
}

model Token {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  Project    Project? @relation(fields: [projectId], references: [id])
  projectId  String?  @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
